#!/usr/bin/env perl 
use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/../mod";
use RPC::Smart::Client;
use Data::Dumper;
use strict;
use kernel;
use kernel::config;
use kernel::EventController;
use Getopt::Long;
use kernel::cgi;
use vars qw($opt_v $opt_h $opt_c $configname);
$0="W5Event ".join(" ",@ARGV);
exit(1) if (!GetOptions('verbose'=>\$opt_v,
                        'debug'=>\$opt_v,
                        'help'=>\$opt_h,
                        'config=s'=>\$opt_c));

if ($opt_v){
   $W5V2::Debug=1;
}
else{
   $W5V2::Debug=0;
}


if ($opt_c eq ""){
   $opt_c="w5server";
}
$configname=$opt_c;

my %ClientParam=();

my $curconfig=new kernel::config();

if (!$curconfig->readconfig("$FindBin::Bin/..",$configname)){
   msg(ERROR,"can't read configfile '%s'",$configname);
   exit(1);
}
{
   my $port=$curconfig->Param("W5SERVERPORT");
   $port=4711 if ($port eq "");
   msg(DEBUG,"W5ServerPort=%s",$port);
   $ClientParam{'PeerPort'}=$port;
}

my $MyClient=new RPC::Smart::Client(%ClientParam);

if (! defined($MyClient->Connect())){
   msg(ERROR,"can't connect to server");
   exit(1);
}
#my $res=$MyClient->Call($method,@ARGV);
#printf("%s",Dumper($res));
if (!defined($W5V2::W5Server)){
   my %ClientParam;
   $ClientParam{'PeerAddr'}=$curconfig->Param("W5SERVERHOST");
   $ClientParam{'PeerPort'}=$curconfig->Param("W5SERVERPORT");
   $W5V2::W5Server=new RPC::Smart::Client(%ClientParam);
   $W5V2::W5Server->Connect();
}

my $pid=`ps -eo pid,comm | grep apache | awk '{print \$1}'`;
my @apid=split(/[\s\n]/,$pid);

my %stat;
my $statedir=$curconfig->Param("LogState");
foreach my $apid (@apid){
   #print("check pid $apid\n");
   my $cpu=`ps -p $apid -o pcpu | grep -v 'CPU'`;
   $cpu=~s/\s//g;
   $stat{$apid}->{cpu}=$cpu;
   my $statefile="$statedir/$apid.pid";
   my $t0=time();
   if (open(F,"<$statefile")){
      $stat{$apid}->{state}=1;
      my $l=<F>;
      $l=~s/\s*$//;
      my @d=split(/;/,$l);
      if ($d[0] ne ""){
         $stat{$apid}->{user}=$d[0];
      }
      else{
         $stat{$apid}->{user}="anonymous";
      }
      $stat{$apid}->{mod}=$d[1];
      $stat{$apid}->{start}=$d[2];
      $stat{$apid}->{duration}=$t0-$d[2];
      close(F);
   }
}

my @order=keys(%stat);

@order=sort({my $bk=$stat{$b}->{duration} <=> $stat{$a}->{duration};
             if ($stat{$b}->{duration}==$stat{$a}->{duration}){
                $stat{$b}->{user}==$stat{$a}->{user};
             }
             $bk;} @order);
my $form="%-6s |%6s |%6s | %-25s | %s\n";

printf($form,"PID","CPU","rsec","User","Modul");
printf("%s\n",'-' x 79);
foreach my $pid (@order){
   printf($form,$pid,$stat{$pid}->{cpu},
                 $stat{$pid}->{duration},
                 $stat{$pid}->{user},
                 $stat{$pid}->{mod});
}



#print Dumper(\%stat);

#printf("fifi pidlist=%s\n",join(",",@apid));



