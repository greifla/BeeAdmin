#!/usr/bin/env perl 
use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/../mod";
use RPC::Smart::Client;
use Data::Dumper;
use strict;
use kernel;
use kernel::config;
use kernel::EventController;
use Getopt::Long;
use kernel::cgi;
use vars qw($opt_v $opt_h $opt_autokill $killtimeout $opt_c $configname);
$0="W5Event ".join(" ",@ARGV);
exit(1) if (!GetOptions('verbose'=>\$opt_v,
                        'debug'=>\$opt_v,
                        'autokill'=>\$opt_autokill,
                        'killtimeout=s'=>\$killtimeout,
                        'help'=>\$opt_h,
                        'config=s'=>\$opt_c));

if ($opt_h){
   help();
   exit(1);
}
if ($opt_v){
   $W5V2::Debug=1;
}
else{
   $W5V2::Debug=0;
}
if ($ENV{REMOTE_USER} eq ""){
   if ($ENV{USER} ne ""){
      $ENV{REMOTE_USER}="system/$ENV{USER}";
   }
   else{
      $ENV{REMOTE_USER}="system/unknown";
   }
   $ENV{REAL_REMOTE_USER}="system/W5Event";
}


if ($killtimeout==0){
   $killtimeout=1800;
}
if ($opt_c eq ""){
   $opt_c="w5base";
}
$configname=$opt_c;

my %ClientParam=();

my $curconfig=new kernel::config();

if (!$curconfig->readconfig("$FindBin::Bin/..",$configname)){
   msg(ERROR,"can't read configfile '%s'",$configname);
   exit(1);
}
{
   my $port=$curconfig->Param("W5SERVERPORT");
   $port=4711 if ($port eq "");
   msg(DEBUG,"W5ServerPort=%s",$port);
   $ClientParam{'PeerPort'}=$port;
}

my $MyClient=new RPC::Smart::Client(%ClientParam);

if (! defined($MyClient->Connect())){
   msg(ERROR,"can't connect to server");
   exit(1);
}
if (!defined($W5V2::W5Server)){
   my %ClientParam;
   $ClientParam{'PeerAddr'}=$curconfig->Param("W5SERVERHOST");
   $ClientParam{'PeerPort'}=$curconfig->Param("W5SERVERPORT");
   $W5V2::W5Server=new RPC::Smart::Client(%ClientParam);
   $W5V2::W5Server->Connect();

#printf STDERR ("fifi $ClientParam{PeerAddr} $ClientParam{PeerPort}\n");
}
$W5V2::OperationContext="W5Server";
$W5V2::Query=new kernel::cgi({});



my $pid=`ps -eo pid,comm | grep apache | awk '{print \$1}'`;
my @apid=split(/[\s\n]/,$pid);

my %stat;
my $statedir=$curconfig->Param("LogState");
foreach my $apid (@apid){
   #print("check pid $apid\n");
   my $cpu=trim(`ps -p $apid -o pcpu,user | grep -v 'CPU'`);
   my ($cpu,$user)=split(/\s+/,$cpu);
   $stat{$apid}->{cpu}=$cpu;
   $stat{$apid}->{sysuser}=$user;
   my $statefile="$statedir/$apid.pid";
   my $t0=time();
   if (open(F,"<$statefile")){
      $stat{$apid}->{state}=1;
      my $l=<F>;
      $l=~s/\s*$//;
      my @d=split(/;/,$l);
      if ($d[0] ne ""){
         $stat{$apid}->{user}=$d[0];
      }
      else{
         $stat{$apid}->{user}="anonymous";
      }
      $stat{$apid}->{mod}=$d[1];
      $stat{$apid}->{start}=$d[2];
      $stat{$apid}->{duration}=$t0-$d[2];
      close(F);
      if ($opt_autokill){
         my $consolemsg="";
         if ($stat{$apid}->{duration}>$killtimeout){
            my $user=getModuleObject($curconfig,"base::user");
            my $modlong=$user->T($stat{$apid}->{mod},$stat{$apid}->{mod});
            $consolemsg.=sprintf("WARN: found long (%dsec) running request at ".
                                 "PID '%s'\n".
                                 "      by user '%s' at ModuleObject %s with\n".
                                 "      label '%s'\n",
                                 $stat{$apid}->{duration},
                                 $apid,$stat{$apid}->{user},
                                 $stat{$apid}->{mod},$modlong);
            $user->SetFilter({accounts=>\$stat{$apid}->{user}});

            my ($urec,$msg)=$user->getOnlyFirst(qw(groups email 
                                                   userid lastlang));
            my $isok=0;
            if (defined($urec)){
               foreach my $grprec (@{$urec->{groups}}){
                  if ($grprec->{group} eq "admin" &&
                      in_array($grprec->{roles},"RMember")){
                     $isok=1;
                     $consolemsg.=sprintf("\n   -> user at PID %s is admin, ".
                                    "so it seems to be ok!\n",$apid);   
                  }
               }
            }
            if (!$isok){
               msg(INFO,"process $apid not OK - check if it is to kill");
               if ($stat{$apid}->{sysuser} eq ""){
                  $consolemsg.=sprintf("   -> ERROR no sysuser for PID %s!\n",
                                       $apid);
               }
               else{
                  my $cmd="sudo -u '$stat{$apid}->{sysuser}' kill $apid";
                  $consolemsg.=sprintf("\n   -> initiate \"%s\"\n",$cmd);
                  msg(INFO,"run command '$cmd'");
                  system($cmd);
               }
               if ((!($? == -1)) && $stat{$apid}->{sysuser} ne ""){
                  my $exitcode=$? >> 8;
                  my $act=getModuleObject($curconfig,"base::workflowaction");
                  $act->Cache->{W5Server}=$W5V2::W5Server;
                  my %param=(adminbcc=>1,
                             emailfrom=>'"W5Base Process-Controller" <>');
                  if (defined($urec)){
                     $param{emailto}=$urec->{email};
                     if ($urec->{lastlang} ne ""){
                        $ENV{HTTP_FORCE_LANGUAGE}=$urec->{lastlang};
                     }
                  }
                  my $sitename=$curconfig->Param("SITENAME");
                  my $d=$act->getParsedTemplate(
                        "tmpl/w5top.killmessage",{
                           static=>{
                              sitename=>$sitename,
                              modlong=>$modlong,
                              killtimeout=>$killtimeout,
                              duration=>$stat{$apid}->{duration},
                              apid=>$apid
                           }
                        });
                  if ($exitcode==0){
                     my $subject=sprintf($act->T(
                        'Kill of query request on module "%s" (PID=%s)',
                        'kernel::w5top'), $modlong,$apid);
                     $act->Notify("INFO",$subject,$d,%param);
                  }
                  else{
                     printf STDERR ("%s\n",$consolemsg);
                     printf STDERR ("ERROR: exitcode of call was not zero!\n");
                  }
                  if (defined($urec)){
                     delete($ENV{HTTP_FORCE_LANGUAGE});
                  }
               }
            }
            else{
               printf STDERR ("%s\n",$consolemsg);
            }
         }
      }
   }
}

my @order=keys(%stat);

@order=sort({my $bk=$stat{$b}->{duration} <=> $stat{$a}->{duration};
             if ($stat{$b}->{duration}==$stat{$a}->{duration}){
                $stat{$b}->{user}==$stat{$a}->{user};
             }
             $bk;} @order);
if (!$opt_autokill){
   my $form="%-6s |%6s |%6s | %-25s | %s\n";

   printf($form,"PID","CPU","rsec","User","Modul");
   printf("%s\n",'-' x 79);
   foreach my $pid (@order){
      printf($form,$pid,$stat{$pid}->{cpu},
                    $stat{$pid}->{duration},
                    $stat{$pid}->{user},
                    $stat{$pid}->{mod});
   }
}

sub help
{
   printf STDERR ("Usage: W5Top -c {config} [-v]\n");
}



