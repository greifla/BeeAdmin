#!/usr/bin/env perl 
use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/../mod";
use RPC::Smart::Client;
use Data::Dumper;
use strict;
use kernel;
use kernel::config;
use kernel::EventController;
use Getopt::Long;
use kernel::cgi;
use vars qw($opt_v $opt_h $opt_c $configname);
$0="W5Event ".join(" ",@ARGV);
exit(1) if (!GetOptions('verbose'=>\$opt_v,
                        'debug'=>\$opt_v,
                        'help'=>\$opt_h,
                        'config=s'=>\$opt_c));

if ($opt_v){
   $W5V2::Debug=1;
}
else{
   $W5V2::Debug=0;
}

if ($ENV{REMOTE_USER} eq ""){
   if ($ENV{USER} ne ""){
      $ENV{REMOTE_USER}="system/$ENV{USER}";
   }
   else{
      $ENV{REMOTE_USER}="system/unknown";
   }
   $ENV{REAL_REMOTE_USER}="system/W5Event";
}
$W5V2::OperationContext="W5Server";



if ($opt_c eq ""){
   $opt_c="w5server";
}
$configname=$opt_c;

my %ClientParam=();

my $curconfig=new kernel::config();

if (!$curconfig->readconfig("$FindBin::Bin/..",$configname)){
   msg(ERROR,"can't read configfile '%s'",$configname);
   exit(1);
}
{
   my $port=$curconfig->Param("W5SERVERPORT");
   $port=4711 if ($port eq "");
   msg(DEBUG,"W5ServerPort=%s",$port);
   $ClientParam{'PeerPort'}=$port;
}

my $MyClient=new RPC::Smart::Client(%ClientParam);
my $self=new kernel::App(Config=>$curconfig);
if (!defined($W5V2::Translation{$self})){
   $W5V2::Translation{$self}={self=>$self,tab=>{}};
}
$W5V2::Translation=$W5V2::Translation{$self};


if (! defined($MyClient->Connect())){
   msg(ERROR,"can't connect to server");
   exit(1);
}
#my $res=$MyClient->Call($method,@ARGV);
#printf("%s",Dumper($res));
if (!defined($W5V2::W5Server)){
   my %ClientParam;
   $ClientParam{'PeerAddr'}=$self->Config->Param("W5SERVERHOST");
   $ClientParam{'PeerPort'}=$self->Config->Param("W5SERVERPORT");
   $W5V2::W5Server=new RPC::Smart::Client(%ClientParam);
   $W5V2::W5Server->Connect();
}
$W5V2::Query=new kernel::cgi({});

my $EventController=new kernel::EventController(Config=>$curconfig);
$EventController->Cache->{W5Server}=$W5V2::W5Server;

$EventController->LoadEventHandler();
my $event=shift(@ARGV);
$event=~s/\.pm$//;
msg(DEBUG,"ProcessEvent '%s'",$event);
my $bk=$EventController->ProcessEvent($event,{param=>[@ARGV]});
if (!defined($bk)){
   msg(ERROR,"Event '%s' not known",$event);
   exit(1);
}
else{
   msg(DEBUG,"Event '%s' processed at %d Handlers",$event,$bk);
   exit(0);
}
