#!/usr/bin/perl
use strict;                     # mandatory
use Getopt::Long;               # mandatory
use FindBin qw($RealScript);    # mandatory

use CGI qw(-oldstyle_urls);
use LWP::UserAgent;
use HTTP::Request::Common;
use Data::Dumper;
use Date::Calc qw(Today);

my $DefaultBase="https://darwin.telekom.de/darwin/auth/";
my ($help,$verbose,$loginuser,$loginpass,$quiet,$base,$month);
my $green;
my %P=("help"       => \$help,
       "base=s"     => \$base,
       "month=s"    => \$month,
       "webuser=s"  => \$loginuser,
       "webpass=s"  => \$loginpass,
       "verbose+"    => \$verbose);

my $optresult=XGetOptions(\%P,\&Help,undef,\&Defaults,".W5Base.DownloadP800");

sub Defaults
{
   my $p=shift;
   ${$p->{'base=s'}}=$DefaultBase if (!defined(${$p->{'base=s'}}));
   if (!defined(${$p->{'month=s'}})){
      my ($year,$mon,$day)=Today();
      ${$p->{'month=s'}}=sprintf("%02d/%04d",$mon,$year);
   }
}


#######################################################################
sub Help
{
   my $myname=$RealScript;
   print(<<EOF);
$myname [options] 

   --verbose display more details of operation process
   --quiet   only errors would be displayed
   --base    base url of filemgmt (default: $DefaultBase)
   --month   report month in format MM/YYYY

   --webuser username
   --webpass password
   --store   stores the parameters (not help,verbose and store)
   --help    show this help

EOF
}

#######################################################################
# my special handler
#
# $optresult=XGetOptions(\%ARGPARAM,\&Help,\&preStore,".W5Base");
# msg("INFO","xxx");
#
sub INFO{"INFO";} 
sub WARN{"WARN";} 
sub DEBUG{"DEBUG";} 
sub ERROR{"ERROR";}
sub XGetOptions
{
   my $param=shift;
   my $help=shift;
   my $prestore=shift;
   my $defaults=shift;
   my $storefile=shift;
   my $optresult;
   if (!($storefile=~m/^\//)){ # finding the home directory
      if ($ENV{HOME} eq ""){
         eval('
            while(my @pline=getpwent()){
               if ($pline[1]==$< && $pline[7] ne ""){
                  $ENV{HOME}=$pline[7];
                  last;
               }
            }
            endpwent();
         ');
      }
      if ($ENV{HOME} ne ""){
         $storefile=$ENV{HOME}."/".$storefile;
      }
   }
   my $store;
   $param->{store}=\$store;
   
   if (!($optresult=GetOptions(%$param))){
      if (defined($help)){
         &$help();
      }
      exit(1);
   }
   if (defined(${$param->{help}})){
      &$help();
      exit(0);
   }
   if (open(F,"<".$storefile)){
      if (defined($prestore)){
         &$prestore($param);
      }
      while(my $l=<F>){
         $l=~s/\s*$//;
         if (my ($var,$val)=$l=~m/^(\S+)\t(.*)$/){
            if (exists($param->{$var})){
               if (!(${$param->{store}}) || $var eq "webuser=s" ||
                   $var eq "webpass=s"){
                  if (!defined(${$param->{$var}})){
                     ${$param->{$var}}=unpack("u*",$val);
                  }
               }
            }
         }
      }
      close(F);
   }
   if (!defined(${$param->{'webuser=s'}})){
      my $u;
      while(1){
         printf("login user: ");
         $u=<STDIN>;
         $u=~s/\s*$//;
         last if ($u ne "");
      }
      ${$param->{'webuser=s'}}=$u;
   }
   if (!defined(${$param->{'webpass=s'}})){
      my $p="";
      system("stty -echo 2>/dev/null");
      $SIG{INT}=sub{ system("stty echo 2>/dev/null");print("\n");exit(1)};
      while(1){
         printf("password: ");
         $p=<STDIN>;
         $p=~s/\s*$//;
         printf("\n");
         last if ($p ne "");
      }
      system("stty echo 2>/dev/null");
      $SIG{INT}='default';
      ${$param->{'webpass=s'}}=$p;
   }
   if (${$param->{store}}){
      if (open(F,">".$storefile)){
         foreach my $p (keys(%$param)){
            next if ($p=~m/^verbose.*/);
            next if ($p=~m/^help$/);
            next if ($p=~m/^store$/);
            if (defined(${$param->{$p}})){
               printf F ("%s\t%s",$p,pack("u*",${$param->{$p}}));
            }
         }
         close(F);
      }
      else{
         printf STDERR ("ERROR: $!\n");
         exit(255);
      }
   }
   if (defined($defaults)){
      &$defaults($param);
   }
   if (defined($param->{'verbose+'}) && 
       ref($param->{'verbose+'}) eq "SCALAR" &&
       ${$param->{'verbose+'}}>0){
      $Main::VERBOSE=1;
      msg(INFO,"using parameters:");
      foreach my $p (sort(keys(%$param))){
         my $pname=$p;
         $pname=~s/=.*$//;
         $pname=~s/\+.*$//;
         msg(INFO,sprintf("%8s = '%s'",$pname,${$param->{$p}}));
      }
      msg(INFO,"-----------------");
   }
   return($optresult);
}

sub msg
{
   my $type=shift;
   my $msg=shift;
   my $format="\%-6s \%s\n";

   if ($type eq "ERROR" || $type eq "WARN"){
      foreach my $submsg (split(/\n/,$msg)){
         printf STDERR ($format,$type.":",$submsg);
      }
   }
   else{
      foreach my $submsg (split(/\n/,$msg)){
         printf STDOUT ($format,$type.":",$submsg) if ($Main::VERBOSE);
      }
   }
}
#######################################################################
#######################################################################

#######################################################################
#                                                                     #
#                                 MAIN                                #
#                                ======                               #
#######################################################################
$base.="/" if (!($base=~m/\/$/));
my $url="${base}base/MyW5Base/Result";
my $outfile=$ARGV[0];

if (!($month=~m/^\d{2}\/\d{4}$/)){
   msg(ERROR,"invalid month '$month'");
   exit(1);
}
$outfile="download.xml" if ($outfile eq "");
msg(INFO,"download to '$outfile'");
if (!open(F,">$outfile")){
   msg(ERROR,"can't open outfile $!");
   exit(1);
}
my $ua=new LWP::UserAgent(env_proxy =>1,keep_alive=>1,timeout=>300);

my $queryparam=[MyW5BaseSUBMOD=>'AL_TCom::MyW5Base::myP800',
                P800_TimeRange=>$month,
                EXVIEWCONTROL=>'TEAM',
                CurrentView=>'(ALL)',
                FormatAs=>'XMLV01'];
my $cgi=new CGI({@$queryparam});
msg(INFO,"url  =".$url);
msg(INFO,"query=".$cgi->query_string());
my $request=POST($url,$queryparam);
$request->authorization_basic($loginuser,$loginpass);
my $response=$ua->request($request);
if ($response->is_success) {
   my $res=$response->content;
   my $size=length($res);
   print F $res;
   msg(INFO,"result ($size bytes) stored in $outfile");
}
else {
   msg("ERROR","http response=".$response->status_line);
   exit(1);
}
close(F);
exit(0);
