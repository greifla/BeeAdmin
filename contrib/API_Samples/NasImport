#!/usr/bin/env perl
package MyWin;
use strict;
use vars qw(@ISA);
use Data::Dumper;
@ISA=qw(Win32::GUI::Window);

sub new
{
   my $type=shift;
   my %param=@_;
   my $hostname=$param{-hostname};
   my $file=$param{ARGV}->[0];
   my $o=$param{o};
   my $force=$param{-force};
   my $nowarn=$param{-nowarn};
   my $mode=$param{-mode};
   my $base=$param{-base};
   my $webuser=$param{-webuser};
   my $webpass=$param{-webpass};
   my $icon=eval("new Win32::GUI::Icon('icon_w5base.ico')");
   $param{-icon}=$icon;
   $param{-left}=100;
   $param{-height}=500;
   $param{-width}=700;
   $param{-dialogui}=1;
   $param{-title}="test" if (!$param{-title});
   $param{-name}="Main";
   $param{-onResize}=\&doResize;
   $param{-onTerminate}=\&doTerminate;
   $param{-onMinimize}=\&doMinimize;
   $param{-minsize}=[800,400];
   eval("\$param{-menu}=Win32::GUI::MakeMenu(
                                     '&File' => 'File',
                                     ' > &Open'  => { -name=>'Open',-onClick=>\\&OpenFile},
                                     ' > &End'  => { -name=>'Exit',-onClick=>\\&doTerminate},
   );");
   my $self=$type->SUPER::new(%param);
   $self->SetIcon($icon);
   #$self->MessageBox('error','header');
   $self=bless($self,$type);
   $self->{file}=$file;
   $self->{o}=$o;
   $self->{ICON}=$icon;
   $self->{mainwebuser}=$webuser;
   $self->{mainwebpass}=$webpass;
   $self->{webbase}=$base;
   $self->AddNotifyIcon(-name => "systray",
                        -icon => $self->{ICON},
                        -tip  => "W5Base Importer",
   );
   $self->Center();
   $self->{GRID}=eval("apply Win32::GUI::GridLayout(\$self,[qw(10 10 90 * 10 30 10 * * * 10 10)],
                                         [qw(20 10 20 20 20 10 10 20 10 * 10 40 10 20 10)],0,0);");
   # select fileformat 
   $self->AddRadioButton(
           -name     => "auto",
           -text     => "Auto",
           -tabstop     => 1,
   );
   $self->{GRID}->add($self->auto,3,3,"justify justify");
   $self->AddRadioButton(
           -name     => "emc",
           -text     => "Emc",
           -tabstop     => 1,
   );
   $self->{GRID}->add($self->emc,3,4,"justify justify");
   $self->AddRadioButton(
           -name     => "netapp",
           -text     => "NetApp",
           -tabstop  => 1,
   );
   $self->{GRID}->add($self->netapp,3,5,"justify justify");
   # hostname & write data
   $self->AddLabel(
          -name   => "hostlabel",
          -text   => "Hostname",
   );
   $self->{GRID}->add($self->hostlabel,4,2,"justify buttom");
   $self->AddTextfield(
           -name      => "hostname",
           -text      => $hostname,
           -width     => 130,
           -height    => 20,
           -tabstop     => 1,
   );
   $self->{GRID}->add($self->hostname, 4, 3, "justify top");
   $self->AddCheckbox(
           -name     => "writedata",
           -text     => "write Data",
           -tabstop     => 1,
   );
   $self->{GRID}->add($self->writedata,4,4,"justify justify");
   $self->AddCheckbox(
           -name     => "warnings",
           -text     => "Warnings on",
           -checked  => 1,
           -tabstop     => 1,
   );
   $self->{GRID}->add($self->warnings,4,5,"justify justify");
   $self->AddGroupbox( 
           -name => "inputdata", 
           -text => "input",
           -size => [100,100],
   );
   $self->{GRID}->add($self->inputdata, [2..5], [1..7], "justify top");
   # login data
   $self->AddLabel(
          -name   => "webuserl",
          -text   => "Webuser",
   );
   $self->{GRID}->add($self->webuserl,8,2,"justify buttom");
   $self->AddTextfield(
          -name      => "webuser",
          -text      => $self->{mainwebuser},
          -width     => 130,
          -height    => 20,
          -tabstop=> 1,
   );
   $self->{GRID}->add($self->webuser, [8..9], 3, "justify top");
   $self->AddLabel(
          -name   => "webpassl",
          -text   => "Webpassword",
   );
   $self->{GRID}->add($self->webpassl,10,2,"justify buttom");
   $self->AddTextfield(
          -name      => "webpass",
          -text      => $self->{mainwebpass},
          -width     => 130,
          -height    => 20,
          -password  => 1,
          -tabstop=> 1,
   );
   $self->{GRID}->add($self->webpass, 10, 3, "justify top");
   $self->AddLabel(
          -name   => "baseurl",
          -text   => "BaseURL",
   );
   $self->{GRID}->add($self->baseurl,8,4,"justify buttom");
   $self->AddTextfield(
          -name      => "base",
          -text      => $self->{webbase},
          -width     => 130,
          -height    => 20,
          -tabstop=> 1,
   );
   $self->{GRID}->add($self->base, [8..10], 5, "justify top");
   $self->AddGroupbox( 
          -name => "connectdata", 
          -text => "connect datas",
          -size => [100,100],
   );
   $self->{GRID}->add($self->connectdata, [7..11], [1..7], "justify top");
   # info row
   $self->AddLabel(
          -name   => "filename",
          -text   => "FILE: ".$self->{file},
   );
   $self->{GRID}->add($self->filename,[9..12],8,"justify justify");
   $self->AddLabel(
          -name   => "fileformat",
          -text   => "FILEFORMAT:",
   );
   $self->{GRID}->add($self->fileformat,[5..8],8,"justify justify");
   $self->AddLabel(
          -name   => "host",
          -text   => "HOSTNAME:",
   );
   $self->{GRID}->add($self->host,[2..3],8,"justify justify");
   # output textfield
   $self->AddTextfield(
           -name        => "output",
           -text        => "",
           -multiline   => 1,
           -readonly    => 1,
           -autohscroll => 1,
           -hscroll     => 1,
           -autovscroll => 1,
           -vscroll     => 1,
           -foreground  => 0x000000,
           -background  => 0xE6E6E6,
   );
   $self->{GRID}->add($self->output, [2..11], 10, "justify justify");
   # start button
   $self->AddButton(
           -name     => "run",
           -text     => "Start",
           -disabled  => 1,
           -onClick  => \&doStart, 
   );
   $self->{GRID}->add($self->run,[2..11],12,"justify justify");
   $self->AddProgressBar(
           -name     => "pgbar",
           -smooth   => 1,
   );
   $self->{GRID}->add($self->pgbar,[2..11],14,"justify justify");
   $self->{GRID}->recalc();
   $self->checkMode();
   $self->emc->SetCheck(1) if ($mode eq "emc");
   $self->netapp->SetCheck(1) if ($mode eq "netapp");
   $self->warnings->SetCheck(0) if ($nowarn);
   $self->auto->SetCheck(1) if ($mode eq "auto");
   $self->writedata->SetCheck(1) if ($force);
   return($self); 
}

sub OpenFile
{
   my $self=shift;
   my $file;
   eval('$file = Win32::GUI::GetOpenFileName();');
   if ($file){
      $self->{file}=$file;
      $self->checkMode();
   }
}

sub doStart
{
   my $self=shift;
   my @oplist; 
   $self->{sharedata}={}; 
   my $mainwin=$self->GetParent();
   $mainwin->output->Change(-text => "");
   $mainwin->output->DoEvents();
   $mainwin->output->LimitText(1000000);
   $mainwin->output->SetFocus();
   $mainwin->output->Append("login ... ");
   my ($exitcode, $msgs);
   my @result=$mainwin->checkMode();
   $mainwin->run->Enable(0);
   if ($result[0] != 0){
      return(1,$result[1]);
   }
   # connect API
   $mainwin->pgbar->StepIt();
   $mainwin->pgbar->SetRange(0,1500);
   $mainwin->pgbar->SetStep(1);
   $mainwin->pgbar->SetPos(50);
   my $Config=main::createConfig($mainwin->{webbase},
                                 $mainwin->{mainwebuser},
                                 $mainwin->{mainwebpass},0,0,\$exitcode,\$msgs);
   if (!$Config){
      eval("Win32::MsgBox(\"login error: \$msgs\",Win32::MB_ICONQUESTION|0, 'Error!')");   
      $mainwin->run->Enable(1);
      return(1,$msgs);
   }
   $mainwin->output->Append("done\r\nget objects ... ");
   @result=main::moduleObj($Config);
   if ($result[0] != 0){
      eval("Win32::MsgBox(\"\$result[1]\",Win32::MB_ICONQUESTION|0, 'Error!')");   
      $mainwin->run->Enable(1);
      return(1,$result[1]);
   }

   # read File
   $mainwin->output->Append("done\r\nreading file ... ");
   @result=main::readFile($mainwin->{FH},
                          $self->{sharedata},
                          $mainwin->{curmode},
                          $mainwin->hostname->GetLine(0),\&StepIt,$mainwin);
   if ($result[0] != 0){
      eval("Win32::MsgBox(\"\$result[1]\",Win32::MB_ICONQUESTION|0, 'Error!')");   
      $mainwin->run->Enable(1);
      return(1,$result[1]);
   }

   # compute operation
   $mainwin->output->Append("done\r\ncompute operations ... and preview operations...\r\n");
   @result=main::calculateOperations($mainwin->{o},$self->{sharedata},
                                     \@oplist,$mainwin->hostname->GetLine(0),\&StepIt,$mainwin);
   if ($result[0] != 0){
      eval("Win32::MsgBox(\"\$result[1]\",Win32::MB_ICONQUESTION|0, 'Error!')");   
      $mainwin->run->Enable(1);
      return(1,$result[1]);
   }
 
   # write data to API
   if ($mainwin->writedata->GetCheck() == 1){
      $mainwin->output->Append("write data ... ");
      @result=main::processOperations($mainwin->{o},\@oplist,\&StepIt,$mainwin);
      if ($result[0] != 0){
         eval("Win32::MsgBox(\"\$result[1]\",Win32::MB_ICONQUESTION|0, 'Error!')");   
         $mainwin->run->Enable(1);
         return(1,$result[1]);
      }
      $mainwin->output->Append("done\r\n");
   }
   $mainwin->output->Append("\r\nready!");
   $mainwin->run->Enable(1);
   $mainwin->pgbar->SetPos(1500);
}

sub StepIt
{
   my $self=shift;
   my $text=shift;
   $self->pgbar->StepIt();;
   if ($self->warnings->GetCheck() == 0 and substr($text,0,4) eq "WARN"){
      return(0); 
   } 
   $text="      ".$text if (substr($text,0,9) eq "insert ip");
   $self->output->Append($text."\r\n") if ($text);
   $self->DoEvents();
}

sub checkMode
{
   my $self=shift;
   my $file=$self->{file};
   my @mode;
   # check filemode
   $self->{curmode}="emc" if ($self->emc->GetCheck() == 1);
   $self->{curmode}="netapp" if ($self->netapp->GetCheck() == 1);
   if (open(FILE,"<$file")){
      $self->run->Enable(1);
      if ($self->auto->GetCheck() == 1){
         @mode=main::detectMode(\*FILE) if ($self->auto->GetCheck() == 1);
         if ($mode[0] == 0){
            $self->{curmode}=$mode[1];
         }else{
            $self->{curmode}="unknown";
         }
      }
      $self->{FH}=\*FILE;
   }
   # limit filename length
   if (length($file) > 45){
      $file=substr($file,0,5)."...".substr($file,length($file)-36,length($file));
   }
   # save login datas
   $self->{webbase}=$self->base->GetLine(0);
   $self->{mainwebuser}=$self->webuser->GetLine(0);
   $self->{mainwebpass}=$self->webpass->GetLine(0);
   # output file datas
   $self->filename->Change(-text=>"FILE: ".$file);
   $self->fileformat->Change(-text=>"FILEFORMAT: ".$self->{curmode});
   $self->host->Change(-text=>"HOSTNAME: ".$self->hostname->GetLine(0));
   if ($mode[0] != 0){
      eval("Win32::MsgBox(\"\$mode[1]\",Win32::MB_ICONEXCLAMATION|0, 'Error!')"); 
      return(1,$mode[1]);
   }
   return(0);
}

sub MyTest
{
   exit(0);
}

sub doTerminate
{
   return(-1);
}

sub doOk
{
   return(-1);
}

sub doResize
{
   my $self=shift;
   $self->{GRID}->recalc();
}

sub doMinimize {
    return(1);
}

################################################################################
package main;
use lib qw(/opt/w5base/lib);
use strict;                   
use W5Base::API;
use Data::Dumper;
use Net::DNS;
use Fcntl qw(SEEK_SET);
use vars qw($GUI $Window);


my $DefaultBase="https://w5base.net/w5base/auth/";
my ($help,$verbose,$loginuser,$loginpass,$quiet,$base,$lang);
my ($mode,$force,$hostname,$type,$gui,$nowarn,%o);
my $count=0;
my %P=("help"=>\$help,"base=s"=>\$base,"lang=s"=>\$lang,
       "webuser=s"=>\$loginuser,"webpass=s"=> \$loginpass,
       "verbose+"=>\$verbose,"nowarn"=>\$nowarn,
       "force"=>\$force,"hostname=s"=>\$hostname,
       "mode=s"=>\$mode,"type=s"=>\$type,"gui"=>\$gui);
my @allowedmodes=qw(auto emc netapp);
my $optresult=XGetOptions(\%P,\&Help,undef,undef,".W5Base.Interface");
my $netdns=new Net::DNS::Resolver();

$mode="auto" if (!defined($mode));
$type="nfs" if (!defined($type));

if ($gui){
   $|=1;
   eval('
         use Win32::GUI;
         use Win32::GUI::GridLayout;
         $GUI=new MyWin(-title=>"W5Base Importer", 
                        -hostname=>$hostname,
                        ARGV=>\@ARGV,
                        o=>\%o,
                        -mode=>$mode,
                        -base=>$base,
                        -webpass=>$loginpass,
                        -webuser=>$loginuser,
                        -nowarn=>$nowarn,
                        -force=>$force);
         $GUI->Show();
         Win32::GUI::Dialog();');
   msg(ERROR,"--gui only on windows systems \n $@") if ($@);
}else{
   # create connection config
   my $apidebug=$verbose>=3 ? 1 : 0;
   my $Config=createConfig($base,$loginuser,$loginpass,$lang,$apidebug);
   
   my @result=moduleObj($Config);
   msg(ERROR,$result[1]);exit(1) if ($result[0] != 0);  
   
   my @hostname=split(/,/,$hostname);
   if ($#hostname == -1){
      msg(ERROR,"no hostname specified!");
      exit(1);
   }
   
   if ($#ARGV == -1){
      msg(ERROR,"no share specified!");
      exit(1);
   }
    
   if ($#ARGV != $#hostname){
      msg(ERROR,"number of hostnames and shares must be the same!");
      exit(1);
   }
   foreach my $file (@ARGV){
      if (open(FILE,"<$file")){ 
         my @curmode=(0,$mode);
         if ($mode eq "auto"){
            @curmode=detectMode(\*FILE);
            if ($curmode[0] != 0){
               msg(ERROR,"mode=".$curmode[1]);
               exit(1);
            }
         }
         my %sharedata;
         my @result=readFile(\*FILE,\%sharedata,$curmode[1],$hostname[$count]);
         if ($result[0] != 0){
            msg(ERROR,$result[1]);
            exit(1);
         }
         my @oplist;
         @result=calculateOperations(\%o,\%sharedata,\@oplist,$hostname[$count]);
         if ($result[0] != 0){
            msg(ERROR,$result[1]);
            exit(1);
         }
         if ($force){
            @result=processOperations(\%o,\@oplist);
            if ($result[0] != 0){
               msg(ERROR,$result[1]);
               exit(1);
            }
         }
         close(FILE);
      }else{
         msg(ERROR,"File: $file doesn't exists");
         exit(1);
      }
      $count++;
   }
}

sub moduleObj
{
   my $Config=shift;
   # load ModuleObject
   my %loadobj=('sys'=>'itil::system',
                'nas'=>'itil::systemnfsnas',
                'ipnet'=>'itil::lnknfsnasipnet',
                'net'=>'itil::network');
   foreach my $localid (keys(%loadobj)){
      my $objectname=$loadobj{$localid};
      my $obj=getModuleObject($Config,$objectname);
      if (!defined($obj)){
         msg(ERROR,"$obj not defined");
      }
      $o{$localid}=$obj;
   }
   return(0);
}

sub detectMode
{
   my $fh=shift;
   my $mode;
   while(<$fh>){
      if ($_=~m/^export.*$/){
         $mode="emc";
         return(0,$mode);
      }elsif($_=~m/^.*sec=sys.*$/){
         $mode="netapp";
         return(0,$mode);
      }
   }
   return(1,"mode not exists");
}


sub readFile
{
   my $fh=shift;
   my $sharedata=shift;
   my $cm=shift;
   my $hostname=shift;
   my $stepit=shift;
   my $mywin=shift;
   seek($fh,SEEK_SET,0);
   $sharedata->{$hostname}->{'ignore'}=[];
   $|=1;
   msg(INFO,"read input file...") if (!$stepit);
   while(my $line=<$fh>){
      &{$stepit}($mywin) if ($stepit);
      $line=~s/\s*$//;
      $line=~s/#.*$//;
      next if ($line=~m/^\s*#.*$/);
      next if ($line=~m/^\s*$/);
      my ($path,$param,@param);
      if ($cm eq "netapp"){
         if (($path,$param)=$line=~m/^(\/.*)\s+(.*)\s*$/){
            $param=~s/^-//;
            @param=split(/,/,$param); 
         }else{
            push(@{$sharedata->{$hostname}->{'ignore'}},"line ignored: $line");
         }
      }elsif($cm eq "emc"){
         if (($path,$param)=$line=~m/^export\s+"([^"]+)"\s+(.*)\s*$/){
             @param=split(/\s+/,$param); 
         }else{
            push(@{$sharedata->{$hostname}->{'ignore'}},"line ignored: $line");
         }
      }else{
         if (!$stepit){
            msg(ERROR,"unknown mode");
            exit;
         }
      }
      foreach my $param (@param){
         if (my ($var,$ip)=$param=~m/^(\S+)=(.*)\s*$/){
            if (lc($var) ne "access" and lc($var) ne 
                         "rw" and lc($var) ne "root"){
               $sharedata->{$hostname}->{$path}->{'exportoptions'}="$ip=$var ";
               next;
            }
            foreach my $ip (split(/:/,$ip)){
               if ($ip!~m/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+.*$/){
                  my $query;
                    
                  if ($query=$netdns->search($ip)){
                     foreach my $rr ($query->answer) {
                        next unless $rr->type eq "A";
                        $ip=$rr->address;
                     }
                  }else{
                     $sharedata->{$hostname}->{$path}->{'exportoptions'}=
                     $sharedata->{$hostname}->{$path}->{'exportoptions'}.
                     "$var=$ip ";
                     push(@{$sharedata->{$hostname}->{'ignore'}},
                     "unknown IP/HOST=$ip, entry will be a export option!");
                     next;
                  }
               }
               if ($ip!~m/^.*[\/].*$/ and 
                   $ip=~m/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$/){
                  $ip="$ip/32";
               }
               $sharedata->{$hostname}->{$path}->{'ip'}->{$ip}->{$var}=1;
            }
         }else{
            push(@{$sharedata->{$hostname}->{'ignore'}},
            "param problem $param line=$line");
         }
      }
   }
   msg(INFO,"ready read input file!") if (!$stepit);
   return(0);
}


sub calculateOperations
{
   my $o=shift;    
   my $sharedata=shift;    
   my $oplist=shift;    
   my $hostname=shift;    
   my $stepit=shift;
   my $mywin=shift;
   my ($networkid,$found);

   # get hostname
   $o->{'sys'}->SetFilter({name=>[$hostname]});
   my @hl=$o->{'sys'}->getHashList(qw(id));
   if ($#hl==-1){
      return(1,"hostname $hostname not exists!");      
   }
   if ($#hl>0){
      return(1,"hostname $hostname not unique!");      
   }
  
   # get network 
   $o->{'net'}->SetFilter({name=>['T-Systems Storage/NAS LAN']});
   my @netid=$o->{'net'}->getHashList(qw(id));
   if ($#netid==-1){
      $o->{'sys'}->LastMsg();
      return(1,"network T-Systems Storage/NAS LAN not exists!");      
   }
   if ($#netid>0){
      $o->{'sys'}->LastMsg();
      return(1,"network T-Systems Storage/NAS LAN not unique!");      
   }

   # get available shares
   my $destid=$hl[0]->{id};
   $o->{'nas'}->SetFilter({systemid=>$destid});
   my @ln=$o->{'nas'}->getHashList(qw(id systemnfsnasserver name cistatusid
                                      type exportoptions systemnfsnas system));
   $o->{'nas'}->dieOnERROR();
   # set needless shares on delete state
   foreach my $ln (@ln){
      my $found=0;
      foreach my $share (keys(%{$sharedata->{$hostname}})){
         if ($ln->{name} eq $share){
            $found=1;
         }
      } 
      if ($found == 0 and $ln->{cistatusid} ne 6){
         push(@$oplist,{OP           => 'update',
                         DATAOBJALIAS => 'nas',
                         IDENTIFYBY   => $ln->{id},
                         MSG          => "delete share ".$ln->{name},
                         DATA         => {cistatusid => 6}});
         if ($stepit){
            &{$stepit}($mywin,"delete share ".$ln->{name});
         }else{
            msg(INFO,"delete share ".$ln->{name});
         }
      }
   }

   foreach my $share (keys(%{$sharedata->{$hostname}})){
      my $mode="insert";

      if ($share eq "ignore"){
         foreach my $ig (@{$sharedata->{$hostname}->{'ignore'}}){
            push(@$oplist,{OP  => 'ignore',
                           MSG => $ig});
            if ($stepit){
               &{$stepit}($mywin,"WARN: $ig");
            }else{
               msg(WARN,"$ig") if (!$nowarn);
            }
         }
         $mode="ignore";
      }
      my $ref;
      foreach my $ln (@ln){
         if ($ln->{name} eq $share){
            $mode="update";
            if ($ln->{cistatusid} != 4 or $ln->{type} ne $type){
               push(@$oplist,{OP           => 'update',
                              DATAOBJALIAS => 'nas',
                              IDENTIFYBY   => $ln->{id},
                              MSG          => "update $share on $hostname",
                              DATA         => {
                                type          => $type,
                                cistatusid    => 4,
                                hostname      => $hostname,
                                name          => $share}});
                  if ($stepit){
                     &{$stepit}($mywin,"update $share on $hostname");
                  }else{
                     msg(INFO,"update $share on $hostname");
                  }
            }
            # get available ip's
            $o->{'ipnet'}->SetFilter({systemnfsnasid=>$ln->{id}});
            my @ni=$o->{'ipnet'}->getHashList(qw(id exportoptions 
                                              networkid systemnfsnasid name));
            $o->{'ipnet'}->dieOnERROR();
            # delete ip's on a existing share
            foreach my $ni (@ni){
               $found=0;
               foreach my $ip (keys(%{$sharedata->{$hostname}->
                                      {$share}->{ip}})){
                  if ($ni->{name} eq $ip){ 
                     $found=1;
                  } 
               }
               if ($found == 0){
                  push(@$oplist,{OP           => 'delete',
                                 DATAOBJALIAS => 'ipnet',
                                 IDENTIFYBY   => $ni->{id},
                                 MSG          => "delete ip with id=$found",
                                 DATA         => {}});
                  if ($stepit){
                     &{$stepit}($mywin,"delete ip with id=$found");
                  }else{
                     msg(INFO,"delete ip with id=$found");
                  }
               }
            }
            # update or insert ip's on a existing share
            foreach my $ip (keys(%{$sharedata->{$hostname}->{$share}->{ip}})){
               $found=0;
               my $options;
               foreach my $ni (@ni){
                  my @r;
                  foreach my $rights (keys(%{$sharedata->{$hostname}->
                                              {$share}->{ip}->{$ip}})){
                        if ($sharedata->{$hostname}->{$share}->
                                         {ip}->{$ip}->{$rights} == 1){
                           push(@r,$rights);     
                        }
                  }
                  $options=join(",",@r);
                  if ($ni->{name} eq $ip and ($ni->{networkid} ne $netid[0]->{id} or
                     $ni->{exportoptions} ne $options or 
                     $ni->{systemnfsnasid} ne $ln->{id})){
                      $found=$ni->{id};
                  }elsif($ni->{name} eq $ip){
                      $found=2;
                  }
               }
               if ($found == 0){
                  push(@$oplist,{OP           => 'insert',
                                 DATAOBJALIAS => 'ipnet',
                                 IDENTIFYBY   => undef,
                                 MSG          => "insert ip $ip",
                                 DATA         => {
                                   systemnfsnasid  => $ln->{id},
                                   exportoptions   => $options,
                                   name            => $ip,
                                   networkid       => $netid[0]->{id}}});
                  if ($stepit){
                     &{$stepit}($mywin,"insert ip $ip");
                  }else{
                     msg(INFO,"insert ip $ip");
                  }
               }elsif($found != 2){
                  push(@$oplist,{OP           => 'update',
                                 DATAOBJALIAS => 'ipnet',
                                 IDENTIFYBY   => $found,
                                 MSG          => "update ip $ip",
                                 DATA         => {
                                   systemnfsnasid  => $ln->{id},
                                   exportoptions   => $options,
                                   name            => $ip,
                                   networkid       => $netid[0]->{id}}});
                  if ($stepit){
                     &{$stepit}($mywin,"update ip $ip");
                  }else{
                     msg(INFO,"update ip $ip");
                  }
               }
            }
         }
      }
      # insert a new share
      if ($mode eq "insert"){
         my $newshare={OP           => 'insert',
                       DATAOBJALIAS => 'nas',
                       IDENTIFYBY   => undef,
                       MSG          => "insert $share on $hostname", 
                       DATA         => {
                         type          => $type,
                         cistatusid    => 4,
                         system        => $hostname,
                         name          => $share,
                         exportoptions => $sharedata->{$hostname}->{$share}->
                                          {'exportoptions'}}};
            if ($stepit){
               &{$stepit}($mywin,"insert $share on $hostname");
            }else{
               msg(INFO,"insert $share on $hostname");
            }
         push(@$oplist,$newshare);

         # insert a new ip on a new share
         my $options;
         foreach my $ip (keys(%{$sharedata->{$hostname}->{$share}->{ip}})){
            my @r;
            foreach my $rights (keys(%{$sharedata->{$hostname}->
                                       {$share}->{ip}->{$ip}})){
               if ($sharedata->{$hostname}->{$share}->{ip}->
                   {$ip}->{$rights} == 1){
                  push(@r,$rights);     
               }
            }
            $options=join(",",@r);
            push(@$oplist,{OP           => 'insert',
                           DATAOBJALIAS => 'ipnet',
                           IDENTIFYBY   => undef,
                           MSG          => "insert ip $ip on $hostname", 
                           DATA         => {
                             name            => $ip,
                             networkid       => $netid[0]->{id},
                             exportoptions   => $options,
                             systemnfsnasid  => \$newshare->{IDENTIFYBY}}});
            if ($stepit){
               &{$stepit}($mywin,"insert ip $ip on $hostname");
            }else{
               msg(INFO,"insert ip $ip on $hostname");
            }
         }
      }
   }
   return(0);
}


sub processOperations
{
   my $o=shift;    
   my $oplist=shift;    
   my $stepit=shift;
   my $mywin=shift;
   my ($id,$found);
   foreach my $record (@$oplist){
      &{$stepit}($mywin) if ($stepit);
      # check for valid objects only
      foreach my $objname (keys(%{$record})){
         $found=0;
         foreach my $orgobjname (qw(DATAOBJALIAS OP MSG DATA IDENTIFYBY)){
            $found=1 if ($objname eq $orgobjname);
         }
         if ($found == 0){
            return(1,"Objectname=$objname not allowed");
         }
      }
      foreach my $data (keys(%{$record->{'DATA'}})){
         if (ref($record->{'DATA'}->{$data}) eq "SCALAR"){ 
            $record->{'DATA'}->{$data}=${$record->{'DATA'}->{$data}};
         }
      }
      if ($record->{OP} eq "insert"){
         $id=$o->{$record->{'DATAOBJALIAS'}}->storeRecord($record->{'DATA'});
         $record->{'IDENTIFYBY'}=$id;
      }elsif($record->{OP} eq "update"){
         $id=$o->{$record->{'DATAOBJALIAS'}}->storeRecord($record->{'DATA'},
                                                          $record->{'IDENTIFYBY'});
      }elsif($record->{OP} eq "delete"){
         $id=$o->{$record->{'DATAOBJALIAS'}}->deleteRecord($record->{'IDENTIFYBY'});
      }else{
         if ($record->{OP} ne "ignore"){
            return(1,"unvalid mode ".$record->{OP});
         }
      }
   }
}

# help menu
sub Help
{
   print(<<EOF);
$RealScript [options] File File ...

   --verbose  display more details of operation process
   --quiet    only errors would be displayed
   --base     base url of filemgmt [default:$DefaultBase]
   --webuser  username
   --webpass  password
   --store    stores the parameters (not help,verbose and store)
   --help     show this help
              
   --mode     emc, netapp, auto [default:auto]
   --hostname more than one seperate by comma
   --type     export type (nfs, cifs ...) [default:nfs]
   --force    write data  
   --gui      grafical user interface
   --nowarn   prevent warnings
EOF
}

exit(255);
